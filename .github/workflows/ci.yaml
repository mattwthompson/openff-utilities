name: CI

on:
  push:
    branches:
      - "main"
      - "maintenance/.+"
  pull_request:
    branches:
      - "main"
      - "maintenance/.+"

defaults:
  run:
    shell: bash -l {0}

jobs:
  test:
    name: ${{ matrix.os }}, 🐍=${{ matrix.python-version }}, AmberTools=${{ matrix.ambertools }}, OpenEye=${{ matrix.openeye }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: [3.8, 3.9]
        ambertools: [false, true]
        openeye: [false, true]

    env:
      OE_LICENSE: ${{ github.workspace }}/oe_license.txt
      COV: --cov=openff/utilities --cov-report=xml --cov-config=setup.cfg --cov-append

    steps:
    - uses: actions/checkout@v3

    - uses: conda-incubator/setup-miniconda@v2.1.1
      with:
        python-version: ${{ matrix.python-version }}
        activate-environment: test
        mamba-version: "*"
        channels: conda-forge,defaults
        environment-file: devtools/conda-envs/test_env.yaml
        auto-update-conda: true
        auto-activate-base: false
        show-channel-urls: true

    - name: Additional info about the build
      run: |
        uname -a
        df -h
        ulimit -a

    - name: Install AmberTools
      if: matrix.ambertools == true
      run: |
        conda install --yes -c conda-forge ambertools
        python -c "from shutil import which; assert which('sqm') is not None"

    - name: Check AmberTools Missing
      if: matrix.ambertools == false
      run: |
        python -c "from shutil import which; assert which('sqm') is None"

    - name: Install OpenEye Toolkits
      if: matrix.openeye == true
      run: |
        conda install --yes -c openeye openeye-toolkits
        python -c "from openeye import oechem"

    - name: Check OpenEye Toolkits missing
      if: matrix.openeye == false
      run: |
        python devtools/scripts/assert_openeye_not_found.py

    - name: Environment Information
      run: |
        conda info
        conda list

    - name: Install package
      run: |
        python setup.py develop --no-deps

    - name: Run mypy
      run: |
        mypy --show-error-codes --namespace-packages -p "openff.utilities"

    - name: Run a test with OpenEye toolkits installed but NOT licensed
      if: matrix.openeye == true
      run:
        pytest -v $COV openff/utilities/tests/test_utilities.py::test_requires_oe_module_installed_missing_license

    - name: License OpenEye
      if: matrix.openeye == true
      run: |
        echo "${SECRET_OE_LICENSE}" > ${OE_LICENSE}
        python -c "from openeye import oechem; assert oechem.OEChemIsLicensed()"
      env:
        SECRET_OE_LICENSE: ${{ secrets.OE_LICENSE }}

    - name: Run unit tests
      run: |
        pytest -v $COV openff/utilities/tests/

    - name: Codecov
      uses: codecov/codecov-action@v3.0.0
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
